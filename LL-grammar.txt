<statement> -> if <exp> { <statementList> } [else { <statementList> }]
<statement> -> if let id { <statementList> } [else { <statementList> }]
<statement> -> while <exp> { <statementList> }
<statement> -> id = <exp> \n
<statement> -> let id [: <type>] = <exp> \n
<statement> -> var id [: <type>] = <exp> \n
<statement> -> var id : <type> [= <exp>] \n
 
<statement> -> return <exp> \n
<statement> -> <func>

<statementList> -> <statement>
<statementList> -> <statement> <statementList>

<func> -> func id ( [{id, _} id : <type>] ) [-> <type>] { <statementList> } 

<type> -> {Double, Int, String}[?]

<exp> -> id ( [ [id:] <exp> [,[id:] <exp> ]*] )
<exp> -> id [!]
<exp> -> id ?? <exp>
<exp> -> {t_double, t_int, t_string} 
<exp> -> <exp> <operator> <exp>
<exp> -> ( <exp> )

<operator> -> +, -, *, /, %, >, >=, <, <=, ==, !=


______________________________________________________________________________________
first(x):
	<exp>
		id, t_double, t_int, t_string, (
______________________________________________________________________________________

<exp> 	-> <exp1> <exp'>
<exp'>	-> ?? <exp>
<exp1>	-> <exp2> <exp1'>
<exp1'>	-> {==, !=, <, >, <=, >=} <exp1>
<exp2>	-> <exp3> <exp2'>
<exp2'>	-> {+, -} <exp2>
<exp3>	-> <exp4> <exp3'>
<exp3'>	-> {*, /} <exp3>
<exp4>	-> <exp5> <exp4'>
<exp4'>	-> !
<exp5>	-> (<exp>), int, string, double

id[([[id:]<exp>[,[id:]<exp>]*])]

